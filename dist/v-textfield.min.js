/**
 * User-friendly form validation in AngularJS
 * @version v0.0.1
 * @link http://lukaszwatroba.github.io/v-textfield
 * @author Łukasz Wątroba <l@lukaszwatroba.com>
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */

!function(e){"use strict";function i(){return{restrict:"A",require:["^vTextfield","ngModel"],scope:{ngRequired:"=?ngRequired"},link:function(i,t,s,n){function u(){r.setHasValue(d())}function l(){r.setIsFocused(!0)}function o(){r.setIsFocused(!1)}function d(i){return i=e.isUndefined(i)?t.val():i,e.isDefined(i)&&null!==i&&""!==i.toString().trim()}if(n[0]||n[1]){var r=n[0],a=n[1];a.$formatters.push(function(e){return r.setHasValue(d(e)),e}),e.isDefined(s.required)?r.setIsRequired(!0):e.isDefined(i.ngRequired)?i.$watch("ngRequired",function(e){r.setIsRequired(e)}):r.setIsRequired(!1),i.$watch(function(){return a.$valid},function(e){r.setIsValid(e)}),i.$watch(function(){return a.$dirty},function(e){r.setIsDirty(e)}),r.setIsFocused(!1),t.bind("input",u).bind("focus",l).bind("blur",o),i.$on("$destroy",function(){r.setIsFocused(!1),r.setHasValue(!1),t.unbind("input",u).unbind("focus",l).unbind("blur",o)})}}}}function t(){return{restrict:"AE",controller:s,scope:{}}}function s(e,i,t){var s=t.classes.states;this.setIsFocused=function(e){i.toggleClass(s.focused,e).toggleClass(s.blured,!e)},this.setHasValue=function(e){i.toggleClass(s.hasValue,e).toggleClass(s.hasNoValue,!e)},this.setIsRequired=function(e){i.toggleClass(s.required,e).toggleClass(s.optional,!e)},this.setIsValid=function(e){i.toggleClass(s.valid,e).toggleClass(s.invalid,!e)},this.setIsDirty=function(e){i.toggleClass(s.dirty,e).toggleClass(s.pristine,!e)},this.setIsTouched=function(e){i.toggleClass(s.touched,e).toggleClass(s.untouched,!e)}}e.module("vTextfield.config",[]).constant("textfieldConfig",{classes:{states:{focused:"is-focused",blured:"is-blured",valid:"is-valid",invalid:"is-invalid",dirty:"is-dirty",pristine:"is-pristine",required:"is-required",optional:"is-optional",hasValue:"has-value",hasNoValue:"has-noValue"}}}),e.module("vTextfield.directives",[]),e.module("vTextfield",["vTextfield.config","vTextfield.directives"]),e.module("vTextfield.directives").directive("vTextfieldInput",i),i.$inject=["textfieldConfig"],e.module("vTextfield.directives").directive("vTextfield",t),s.$inject=["$scope","$element","textfieldConfig"]}(angular);